# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Thinkific.Api.Categories do
  @moduledoc """
  API calls for all endpoints tagged `Categories`.
  """

  alias Thinkific.Connection
  import Thinkific.RequestBuilder


  @doc """
  crateCollection
  Creates a new Category

  ## Parameters

  - connection (Thinkific.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CollectionRequest): New collections attributes

  ## Returns

  {:ok, %Thinkific.Model.CollectionResponse{}} on success
  {:error, info} on failure
  """
  @spec crate_collection(Tesla.Env.client, keyword()) :: {:ok, Thinkific.Model.CollectionResponse.t} | {:error, Tesla.Env.t}
  def crate_collection(connection, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/collections")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Thinkific.Model.CollectionResponse{})
  end

  @doc """
  deleteCollectionByID
  Deletes the Category identified by the provided id

  ## Parameters

  - connection (Thinkific.Connection): Connection to server
  - id (float()): ID of the Category in the form of an integer
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_collection_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_collection_by_id(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/collections/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  GetCollectionbyID
  Retrieves a Collection

  ## Parameters

  - connection (Thinkific.Connection): Connection to server
  - id (float()): ID of the Category in the form of an integer
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Thinkific.Model.CollectionResponse{}} on success
  {:error, info} on failure
  """
  @spec get_collectionby_id(Tesla.Env.client, float(), keyword()) :: {:ok, Thinkific.Model.CollectionResponse.t} | {:error, Tesla.Env.t}
  def get_collectionby_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/collections/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Thinkific.Model.CollectionResponse{})
  end

  @doc """
  getCollections
  Retrieves a list of Collections **NOTE: This endpoint will be renamed to /categories in future API versions.**

  ## Parameters

  - connection (Thinkific.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :page (float()): The page within the collection to fetch
    - :limit (float()): The number of items to be returned

  ## Returns

  {:ok, %Thinkific.Model.GetCollectionsResponse{}} on success
  {:error, info} on failure
  """
  @spec get_collections(Tesla.Env.client, keyword()) :: {:ok, Thinkific.Model.GetCollectionsResponse.t} | {:error, Tesla.Env.t}
  def get_collections(connection, opts \\ []) do
    optional_params = %{
      :"page" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:get)
    |> url("/collections")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Thinkific.Model.GetCollectionsResponse{})
  end

  @doc """
  getProductsbyID
  Retrieves Products within the Category identified by the provided id

  ## Parameters

  - connection (Thinkific.Connection): Connection to server
  - id (float()): ID of the Chapter in the form of an integer
  - opts (KeywordList): [optional] Optional parameters
    - :page (float()): The page within the collection to fetch
    - :limit (float()): The number of items to be returned

  ## Returns

  {:ok, %Thinkific.Model.GetProductsResponse{}} on success
  {:error, info} on failure
  """
  @spec get_productsby_id(Tesla.Env.client, float(), keyword()) :: {:ok, Thinkific.Model.GetProductsResponse.t} | {:error, Tesla.Env.t}
  def get_productsby_id(connection, id, opts \\ []) do
    optional_params = %{
      :"page" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:get)
    |> url("/collections/#{id}/products")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Thinkific.Model.GetProductsResponse{})
  end

  @doc """
  updateCollectioByID
  Updates the Category identified by the provided id

  ## Parameters

  - connection (Thinkific.Connection): Connection to server
  - id (float()): ID of the Category in the form of an integer
  - opts (KeywordList): [optional] Optional parameters
    - :body (CollectionRequest): Collections attributes

  ## Returns

  {:ok, %Thinkific.Model.CollectionResponse{}} on success
  {:error, info} on failure
  """
  @spec update_collectio_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, Thinkific.Model.CollectionResponse.t} | {:error, Tesla.Env.t}
  def update_collectio_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/collections/#{id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Thinkific.Model.CollectionResponse{})
  end
end
